buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
	}
}

plugins {
	id "com.github.kt3k.coveralls" version "2.4.0x"
	id "jacoco"
	id "maven"
	id "org.sonarqube" version "1.1"
	id "signing"
}

description 'A Java library to find and configure HBM devices via multicast communication.'
group = 'com.hbm'

project.version = getRootProject().version

def isDevBuild

def repositoryUrl

if (hasProperty("bintray")) {
	repositoryUrl = "https://api.bintray.com/maven/hbm/java/" + project.name + "/"
} else if (hasProperty("mavencentral")) {
	repositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

if (!project.hasProperty("repositoryUsername")) {
	ext.repositoryUsername = ""
}

if (!project.hasProperty("repositoryPassword")) {
	ext.repositoryPassword = ""
}

processResources {
	expand projectVersion: project.version
}

dependencies {
	compile group: 'com.google.code.gson', name: 'gson', version: '2.5'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

jacoco {
	toolVersion = "0.7.5.201505241946"
}

jacocoTestReport {
	description = "Generate Jacoco coverage reports after running tests."
	reports {
		xml {
			enabled true
			destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
		}
		
		csv.enabled false
		
		html {
			enabled true
			destination "${buildDir}/reports/jacoco/test/html"
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	archiveName = jar.baseName +'-' + classifier + '.' + jar.extension
	from sourceSets.main.allSource
}

javadoc {
	configure(options) {
		links = ['http://docs.oracle.com/javase/7/docs/api/']
		bottom = 'Copyright &copy; 2014-2014 <a href=\"http://www.hbm.com\" target=\"_blank\">Hottinger Baldwin Messtechnik GmbH</a>.'
		footer = 'HBM Device Scan API'
		header = 'HBM Device Scan API'
		options.overview = "src/main/doc/overview.html"
	}
	doLast {
		copy {
			from "src/main/doc/doc-files"
			into "$buildDir/docs/javadoc/doc-files"
		}
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	archiveName = jar.baseName +'-' + classifier + '.' + jar.extension
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

jar {
	archiveName = jar.baseName + '.' + jar.extension
	exclude ('fakemessages.properties')
	manifest {
		attributes \
			'Implementation-Title': 'HBM Device Scan Library', \
			'Implementation-Version': version, \
			'Implementation-Vendor': 'Hottinger Baldwin Messtechnik GmbH', \
			'Built-By': System.getProperty('user.name'), \
			'Built-JDK': System.getProperty('java.version'), \
			'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
	}
}

gradle.taskGraph.whenReady { taskGraph ->
	if (taskGraph.allTasks.any { it instanceof Sign }) {
		def id = gpg_id
		def file = gpg_secring
		def password = gpg_passphrase
		
		allprojects { ext."signing.keyId" = id }
		allprojects { ext."signing.secretKeyRingFile" = file }
		allprojects { ext."signing.password" = password }
	}
}

if (getRootProject().ext.isReleaseBuild) {
	signing {
		sign configurations.archives
	}
} else {
	task signArchives {
		// do nothing
	}
}

uploadArchives {
	repositories {
		if (!getRootProject().ext.isReleaseBuild) {
			mavenLocal()
		} else {
			mavenDeployer {
				if (getRootProject().ext.isReleaseBuild) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}
				
				repository(url: repositoryUrl,id: project.name) {
							authentication(userName: repositoryUsername, password: repositoryPassword)
				}

				pom.project {
					name 'HBM device scan library for Java'
					packaging 'jar'
					description project.description
					url 'https://github.com/HBM/java-scan'

					scm {
						url 'git@github.com:HBM/java-scan.git'
						connection 'scm:git:git@github.com:HBM/java-scan.git'
						developerConnection 'scm:git:git@github.com:HBM/java-scan.git'
					}

					organization {
						name 'Hottinger Baldwin Messtechnik GmbH'
						url 'http://www.hbm.com'
					}

					licenses {
						license {
							name 'MIT License'
							url 'http://www.opensource.org/licenses/mit-license.php'
							distribution 'repo'
						}
					}

					developers {
						developer {
							name 'Stephan Gatzka'
							organization = 'Hottinger Baldwin Messtechnik GmbH'
						}
					}
				}
			}
		}
	}
}

task createWrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

